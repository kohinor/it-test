imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: @SyliusCoreBundle/Resources/config/app/main.yml }
    - { resource: kitpages.yml }
    - { resource: sylius.yml }

framework:
    translator:      { fallback: %sylius.locale% }
    secret:          %sylius.secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: %kernel.debug%
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] }
    default_locale:  "%sylius.locale%"
    trusted_proxies: ~
    session:         ~

twig:
    globals:
        cms:
            type: service
            id: kitpages.cms.model.cmsManager
            layout: AppSiteBundle::base.html.twig
        base_url: "%base_url%"
        google_analytics_ua: "%google_analytics_ua%"
    exception_controller:  App\SiteBundle\Controller\ExceptionController::showAction
    
    form:
        resources:
            - 'SyliusWebBundle::forms.html.twig'
            - SyliusResourceBundle::forms.html.twig
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        ['SyliusWebBundle', 'SyliusResourceBundle']
    filters:
        cssrewrite: ~

doctrine:
    dbal:
        driver:   %sylius.database.driver%
        host:     %sylius.database.host%
        port:     %sylius.database.port%
        dbname:   %sylius.database.name%
        user:     %sylius.database.user%
        password: %sylius.database.password%
        charset:  UTF8
    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                metadata_cache_driver: array
                query_cache_driver: memcached
                result_cache_driver: memcached
                auto_mapping: true
                mappings:
                    gedmo_loggable:
                        type: annotation
                        prefix: Gedmo\Loggable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Loggable/Entity"
                        is_bundle: false
                    gedmo_translatable:
                        type: annotation
                        prefix: Gedmo\Translatable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translatable/Entity"
                        alias: GedmoTranslatable # this one is optional and will default to the name set for the mapping
                        is_bundle: false
                    gedmo_translator:
                        type: annotation
                        prefix: Gedmo\Translator\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translator/Entity"
                        alias: GedmoTranslator # this one is optional and will default to the name set for the mapping
                        is_bundle: false
                filters:
                    softdeleteable:
                        class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                        enabled: true
           
doctrine_phpcr:
    session:
        backend:
            type: doctrinedbal
        workspace: default
        username: ''
        password: ''
    odm:
        auto_mapping: true
        auto_generate_proxy_classes: %kernel.debug%

swiftmailer:
    transport: %sylius.mailer.transport%
    host:      %sylius.mailer.host%
    username:  %sylius.mailer.user%
    password:  %sylius.mailer.password%
    spool:     { type: memory }

lexik_translation:
    fallback_locale:      en
    managed_locales:      [en,fr]

a2lix_translation_form:
    locales: [en,fr]      
            
nelmio_solarium:
    endpoints:
        default:
            dsn: %solr.dsn%
            timeout: 5
    clients:
        default:
            endpoints: [default]
            
knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: AppSolrSearchBundle:SolrSearch:sliding.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig 
        
liip_imagine:
    loaders:
        stream.profile:
            stream:
                wrapper: gaufrette://sylius_image/
    cache: 'cached_amazon_s3'
    data_loader: stream.profile
    filter_sets:
        sylius_home:
           quality: 75
           filters:
                thumbnail: { size: [260, 312], mode: inset } 
        sylius_small:
            quality: 75
            filters:
                thumbnail: { size: [116, 140], mode: inset }
        sylius_medium:
            quality: 75
            filters:
                thumbnail: { size: [320, 384], mode: inset }
        sylius_large:
            quality: 75
            filters:
                thumbnail: { size: [600, 720], mode: inset }
        sylius_x_large:
            quality: 75
            filters:
                thumbnail: { size: [1024, 1228], mode: inset }

doctrine_cache:
    providers:
        memcached:
            memcached:
                servers:
                    127.0.0.1: 11211
  
knp_gaufrette:
    stream_wrapper:
        protocol: gaufrette
        filesystems:
            sylius_image: sylius_image
    adapters:
        sylius_image:
            amazon_s3:
                amazon_s3_id: amazonS3 #this needs to match the "service" you defined above
                bucket_name: %amazon_s3.bucket%
                options:
                    create: true
    filesystems:
        sylius_image:
            adapter:    sylius_image
             
services:
    amazonS3:
        class: AmazonS3
        arguments:
            options:
                key:      '%amazon_s3.key%'
                secret:   '%amazon_s3.secret%'
                default_cache_config: "%kernel.root_dir%/cache"

    liip_imagine.cache.resolver.amazon_s3:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\AmazonS3Resolver
        arguments:
            - "@amazonS3"
            - "%amazon_s3.bucket%"
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: 'amazon_s3' }
            
    liip_imagine.cache.resolver.amazon_s3.cache:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\CacheResolver
        arguments:
            - "@cache.apccache"
            - "@liip_imagine.cache.resolver.amazon_s3"
            -
                prefix: "amazon_s3"
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: 'cached_amazon_s3' }
            
    cache.apccache:
        class: %doctrine.orm.cache.apc.class%

    api_client:
        class: Guzzle\Http\Client
        arguments: [%api_client.base_url%, %api_client.config%]